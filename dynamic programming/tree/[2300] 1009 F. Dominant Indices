#include <bits/stdc++.h>

using namespace std;

struct edge{
    int y, last;
};

int const N = 1e6+5;
edge Edges[2*N];
int head[N];
int cnt=0;
void insert(int x, int y){
    int last=head[x];
    head[x]=++cnt;
    Edges[cnt].y=y;
    Edges[cnt].last=last;
}

int buffer[N], son[N], dep[N], ans[N];
int *f[N], *now=buffer;

void dfs1(int u, int p){
    for (int i=head[u];i;i=Edges[i].last){
        int v=Edges[i].y;
        if (v==p) continue;
        dfs1(v,u);
        if (dep[v]>dep[son[u]]) son[u]=v;
    }
    dep[u]=dep[son[u]]+1;
}

void dfs2(int u, int p){
    f[u][0]=1;
    if (son[u]){
        f[son[u]]=f[u]+1;
        dfs2(son[u],u);
        ans[u]=ans[son[u]]+1;
    }

    for (int it=head[u];it;it=Edges[it].last){
        int v=Edges[it].y;
        if (v==p||v==son[u])continue;
        f[v]=now;now+=dep[v];
        dfs2(v,u);
        for (int i=1;i<=dep[v];++i){
            f[u][i]+=f[v][i-1];
            if (f[u][i]>f[u][ans[u]] || (f[u][i]==f[u][ans[u]] && i<ans[u]))ans[u]=i;
        }
    }
    if (f[u][ans[u]]==1)ans[u]=0;
}

int main(){
    std::ios::sync_with_stdio(0), cin.tie(0),cout.tie(0);
    int n;
    cin>>n;
    for (int i=1;i<n;++i){
        int x,y;
        cin>>x>>y;
        insert(x,y);
        insert(y,x);
    }

    dfs1(1,0);
    f[1]=now;now+=dep[1];
    dfs2(1,0);
    for (int i=1;i<=n;++i)
        cout<<ans[i]<<'\n';
    return 0;
}
