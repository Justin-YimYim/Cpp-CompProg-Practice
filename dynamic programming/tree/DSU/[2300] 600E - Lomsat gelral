#include <bits/stdc++.h>
#define int long long 

using namespace std;

struct edge{
    int v, last;
};

const int N = 1e5 + 5;
edge Edges[N * 2];
int head[N], cnt=0;

int clr[N], sz[N], son[N];

void insert(int u, int v){
    int last=head[u];
    head[u]=++cnt;
    Edges[cnt].v=v;
    Edges[cnt].last=last;
}

void dfs(int u, int p){
    sz[u]=1;
    for (int i=head[u];i;i=Edges[i].last){
        int v=Edges[i].v;
        if (v == p) continue;
        dfs(v, u);
        sz[u]+=sz[v];
        if (sz[v] > sz[son[u]]) son[u]=v;
    }
}

int ans=0, t=0, tmp=0, Ans[N], ct[N];
int que[N];


void cl(){
    ans=tmp=0;
    while(t) ct[que[t--]]=0;
}

void insert(int u){
    ++ct[que[++t]=clr[u]];
    if (ct[clr[u]] > tmp) tmp=ct[ans=clr[u]];
    else if (ct[clr[u]] == tmp) ans+=clr[u];
}

void addLight(int u, int p){
    insert(u);
    for (int i=head[u];i;i=Edges[i].last)
        if(Edges[i].v!=p) addLight(Edges[i].v, u);
}

void dfs2(int u, int p){
    for (int i=head[u];i;i=Edges[i].last)
        if (Edges[i].v!=p && Edges[i].v!=son[u]) dfs2(Edges[i].v, u), cl();

    if (son[u]) dfs2(son[u], u);

    for (int i=head[u];i;i=Edges[i].last)
        if (Edges[i].v!=p && Edges[i].v!=son[u]) 
            addLight(Edges[i].v,u);
        

    insert(u);
    Ans[u]=ans;
}

signed main(){
    std::ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n;
    cin>>n;
    for (int i=1;i<=n;++i)
        cin>>clr[i];

    for (int i=1;i<n;++i){
        int u,v;
        cin>>u>>v;
        insert(u,v);
        insert(v,u);
    }

    dfs(1,0);
    // for (int i=1;i<=n;++i) cout << son[i] << '\n';
    dfs2(1,0);

    for (int i=1;i<=n;++i) cout<<Ans[i]<<' ';

    return 0;
}
