class Solution {
public:
    int countPalindromicSubsequences(string s) {
        long long dp[1001][1001][4] = {0};
        for (size_t i = 0; i < s.size(); i++){
            if ('a' == s[i]){
                dp[1][i][0] = 1;
            }else if('b' == s[i]){
                dp[1][i][1] = 1;
            }else if('c' == s[i]){
                dp[1][i][2] = 1;
            }else{
                dp[1][i][3] = 1;
            }
        }
        int mod(1000000007);
        for (size_t i = 2; i <= s.size(); ++i){
            for (size_t j = 0; j <= s.size() - i; ++j){
                (dp[i][j][0] = dp[i - 1][j][0] + dp[i - 1][j + 1][0] - dp[i - 2][j + 1][0]) %= mod ;
                (dp[i][j][1] = dp[i - 1][j][1] + dp[i - 1][j + 1][1] - dp[i - 2][j + 1][1]) %= mod;
                (dp[i][j][2] = dp[i - 1][j][2] + dp[i - 1][j + 1][2] - dp[i - 2][j + 1][2]) %= mod;
                (dp[i][j][3] = dp[i - 1][j][3] + dp[i - 1][j + 1][3] - dp[i - 2][j + 1][3]) %= mod;
                if (s[j] == s[i + j - 1]){
                    if ('a' == s[j]){
                        (dp[i][j][0] = 2 + dp[i - 2][j + 1][0] + dp[i - 2][j + 1][1] + dp[i - 2][j + 1][2] + dp[i - 2][j + 1][3]) %= mod;
                    }else if('b' == s[j]){
                        (dp[i][j][1] = 2 + dp[i - 2][j + 1][0] + dp[i - 2][j + 1][1] + dp[i - 2][j + 1][2] + dp[i - 2][j + 1][3]) %= mod;
                    }else if('c' == s[j]){
                        (dp[i][j][2] = 2 + dp[i - 2][j + 1][0] + dp[i - 2][j + 1][1] + dp[i - 2][j + 1][2] + dp[i - 2][j + 1][3]) %= mod;
                    }else{
                        (dp[i][j][3] = 2 + dp[i - 2][j + 1][0] + dp[i - 2][j + 1][1] + dp[i - 2][j + 1][2] + dp[i - 2][j + 1][3]) %= mod;
                    }
                }
            }
        }

        int ans = (dp[s.size()][0][0] + dp[s.size()][0][1] + dp[s.size()][0][2] + dp[s.size()][0][3]) % mod;
        return ans;
    }
};
