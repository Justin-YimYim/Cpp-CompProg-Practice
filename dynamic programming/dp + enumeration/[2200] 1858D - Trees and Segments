#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <unordered_map>

using namespace std;

int main(){
    int t;
    cin >> t;


    for (int x(0); x < t; ++x){
        int n, k;
        cin >> n >> k;
        string s;
        cin >> s;

        vector<vector<int>> ll0((n + 2), vector<int> ((k + 2), 0)), ll1((n + 2), vector<int> ((k + 2), 0));
        vector<vector<int>> rl0((n + 2), vector<int> ((k + 2), 0)), rl1((n + 2), vector<int> ((k + 2), 0));
        
        if (s[0] == '0') ll0[0][0] = 1;
        else ll1[0][0] = 1;
        
        for (int j = 1; j <= k; ++j){
            ll0[0][j] = 1;
            ll1[0][j] = 1;
        }
        
        for (int i = 1; i < n; ++i){
            if (s[i] == '0') ll0[i][0] = max(1, ll0[i - 1][0] + 1);
            else ll1[i][0] = max(1, ll1[i - 1][0] + 1);
            for (int j = 1; j <= k; ++j){
                if (s[i] == '0'){
                    ll0[i][j] = ll0[i - 1][j] + 1;
                    ll1[i][j] = ll1[i - 1][j - 1] + 1;
                }else{
                    ll0[i][j] = ll0[i - 1][j - 1] + 1;
                    ll1[i][j] = ll1[i - 1][j] + 1;
                }
            }
        }
        
        if (s[n - 1] == '0') rl0[n - 1][0] = 1;
        else rl1[n- 1][0] = 1;
        
        for (int j = 1; j <= k; ++j){
            rl0[n - 1][j] = 1;
            rl1[n - 1][j] = 1;
        }

        for (int i = n - 2; i >= 0; --i){
            if (s[i] == '0') rl0[i][0] = max(1, rl0[i + 1][0] + 1);
            else rl1[i][0] = max(1, rl1[i + 1][0] + 1);
            for (int j = 1; j <= k; ++j){
                if (s[i] == '0'){
                    rl0[i][j] = rl0[i + 1][j] + 1;
                    rl1[i][j] = rl1[i + 1][j - 1] + 1;
                }else{
                    rl0[i][j] = rl0[i + 1][j - 1] + 1;
                    rl1[i][j] = rl1[i + 1][j] + 1;
                }
            }
        }

        for (int i = 0; i <= k; ++i){
            for (int j = 1; j < n; ++j){
                ll0[j][i] = max(ll0[j][i], ll0[j - 1][i]);
                ll1[j][i] = max(ll1[j][i], ll1[j - 1][i]);
                rl0[n - j - 1][i] = max(rl0[n - j][i], rl0[n - j - 1][i]);
                rl1[n - j - 1][i] = max(rl1[n - j - 1][i], rl1[n - j][i]);
            }
        }

        unordered_map<int, int> potential;
        for (int i = 0; i < n; ++i){
            for (int j = 0; j <= k; ++j){
                potential[ll0[i][j]] =  max(rl1[i + 1][k - j], potential[ll0[i][j]]);
                potential[rl0[i + 1][j]] = max(ll1[i][k - j], potential[rl0[i + 1][j]]);
            }
        }
        
        for (int i = 1; i <= n; ++i){
            int ans(0);
            for (auto &a: potential){
                ans = max(ans, i * a.first + a.second);
            }
            cout << ans << " ";
        }
        
        cout << endl;
    }
    return 0;
}
