#include <bits/stdc++.h>

using namespace std;

int main(){  
    string s;
    cin >> s;
    vector<vector<vector<short> > > dp(s.size() + 1, vector<vector<short> > (s.size() + 1, vector<short> ((s.size() + 1) * (s.size() + 1), SHRT_MAX)));
    dp[0][1][0] = (s[0] == '0'? 0: 1);
    dp[0][0][0] = (s[0] == '1'? 0: 1);
    for (int i = 1; i < s.size(); ++i){
        short tmp0(s[i] == '0'? 0: 1), tmp1(s[i] == '1' ? 0: 1);
        for (int j = 0; j < s.size(); ++j){
            for (int k = 0; k < s.size() * s.size(); ++k){
                if (j - 1 >= 0 && dp[i - 1][j - 1][k] != SHRT_MAX)
                    dp[i][j][k] = min(dp[i][j][k], short(dp[i - 1][j - 1][k] + tmp0));
                if (k - j >= 0 && dp[i - 1][j][k - j] != SHRT_MAX)
                    dp[i][j][k] = min(dp[i][j][k], short(dp[i - 1][j][k - j] + tmp1));
            }
        }
    }   

    // for (auto &a: dp){
    //     for (auto &i: a){
    //         for (auto &j: i){
    //             cout << j << " ";
    //         }
    //     }
    //     cout << endl;
    // }
    
    int cnt(0);
    for (int i = 0; i < s.size(); ++i)
    	if (s[i] == '0') cnt++;

    if (cnt == 0 || cnt == s.size()){
        cout << 0 << endl;
        return 0;
    }
    int need((s.size() - cnt) * cnt / 2);
    cout << dp[s.size() - 1][cnt][need] / 2<< endl;
    return 0;
}
