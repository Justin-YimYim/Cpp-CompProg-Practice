class Solution {
public:
    int rob(vector<int>& nums) {
        int dp[nums.size()][2];
        memset(dp, 0,  sizeof(dp[0][0]) * 2 * nums.size());
        if (nums.size() == 1) return nums[0];
        if (nums.size() == 2) return max(nums[0], nums[1]);
        if (nums.size() == 3) return max(max(nums[0], nums[1]), nums[2]);
        dp[1][0] = nums[1];
        dp[2][0] = max(nums[1], nums[2]);
        dp[nums.size() - 2][1] = nums[nums.size() - 2];
        dp[nums.size() - 3][1] = max(dp[nums.size() - 2][1], nums[nums.size() - 3]);
        for (size_t i = 3; i < nums.size() - 1; ++i){
            dp[i][0] = max(nums[i] + dp[i - 2][0], dp[i - 1][0]);
            dp[nums.size() - 1 - i][1] = max(nums[nums.size() - 1 - i] + dp[nums.size() - i + 1][1], dp[nums.size() - i][1]);
        }

        if (dp[nums.size() - 2][0] == dp[nums.size() - 3][0] && dp[1][1] == dp[2][1]) return max(nums[0], nums[nums.size() - 1]) + dp[1][1];
        else if(dp[nums.size() - 2][0] == dp[nums.size() - 3][0]) return max(nums[nums.size() - 1] + dp[nums.size() - 3][0], dp[2][1] + nums[0]);
        else if(dp[1][1] == dp[2][1]) return max(nums[nums.size() - 1] + dp[nums.size() - 3][0], dp[2][1] + nums[0]);
        else return max(max(dp[1][1], nums[nums.size() - 1] + dp[nums.size() - 3][0]), dp[2][1] + nums[0]);
    }
};[
