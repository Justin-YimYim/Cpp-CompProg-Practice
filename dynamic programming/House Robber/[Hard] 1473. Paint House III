class Solution {
public:
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        int dp[m][target][n];
        memset(dp, -1, sizeof(dp));
        if (houses[0] != 0){
            for(int i = 0; i < n; ++i){
                dp[0][0][i] = -1;
            }
            dp[0][0][houses[0] - 1] = 0;
        }else{
            for (int i = 0; i < n; ++i){
                dp[0][0][i] = cost[0][i];
            }
        }
 
        for (int i = 1; i < houses.size(); ++i){
            for (int k = 0; k < n; ++k){
                if (dp[i - 1][0][k] == -1) dp[i][0][k] = -1;
                else{
                    if (houses[i] != k + 1 && houses[i] != 0) dp[i][0][k] = -1;
                    else if (houses[i] == k + 1) dp[i][0][k] = dp[i - 1][0][k];
                    else dp[i][0][k] = dp[i - 1][0][k] + cost[i][k];
                } 
            }

            for (int j = 1; j < target; ++j){
                int realCost(0);
                if (houses[i] == 0) realCost = cost[i][0];
                else if (houses[i] != 1) realCost = -1;
                int lastMin(INT_MAX);
                if (n > 1){
                    for (int k_2 = 1; k_2 < n; ++k_2){
                        if (dp[i - 1][j - 1][k_2] != -1) lastMin = min(lastMin, dp[i - 1][j - 1][k_2]);
                    }  
                }
                if (dp[i - 1][j][0] != -1) lastMin = min(lastMin, dp[i - 1][j][0]);	

                if (lastMin == INT_MAX) dp[i][j][0] = -1;
                else if (realCost != -1) dp[i][j][0] = lastMin + realCost;
                else dp[i][j][0] = -1;

                for (int k = 1; k < n; ++k){
                    int realCost(0);
                    if (houses[i] == 0) realCost = cost[i][k];
                    else if (houses[i] != k + 1) realCost = -1;
                    int lastMin(INT_MAX);
                    for (int k_2 = 0; k_2 < n; ++k_2){
                        if (k != k_2) if (dp[i - 1][j - 1][k_2] != -1) lastMin = min(lastMin, dp[i - 1][j - 1][k_2]);
                    }
                    
                    if (dp[i - 1][j][k] != -1) lastMin = min(lastMin, dp[i - 1][j][k]);	

                    if (lastMin == INT_MAX) dp[i][j][k] = -1;
                    else if (realCost != -1) dp[i][j][k] = lastMin + realCost;
                    else dp[i][j][k] = -1;
                }
            }
        }

        int ans(INT_MAX);
        for (int i = 0; i < n; ++i){
            if (dp[houses.size() - 1][target - 1][i] != -1) ans = min(ans, dp[houses.size() - 1][target - 1][i]);
        }
        if (ans == INT_MAX) ans = -1;
        return ans;
    }
};
