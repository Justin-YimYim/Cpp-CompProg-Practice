#include <bits/stdc++.h>

using namespace std;

// Idea absolute value + dp

int main(){
    std::ios::sync_with_stdio(0);
    cin.tie(0);    
    cout.tie(0);
    int t;
    cin >> t;
    while (t--){
        int n, k;
        cin >> n >> k;
        long long a[n + 1], b[n + 1];
        for (int i = 1; i <= n; ++i)
            cin >> a[i];

        for (int i = 1; i <= n; ++i)
            cin >> b[i];

        long long f[n + 1][4];
        long long dp[n + 1][n + 1];

        memset(f, 0x80, sizeof(f));
        // f[0] = -a, -b
        // f[1] = -a, +b
        // f[2] = a, -b
        // f[3] = a, b
        memset(dp, 0, sizeof(dp));

        for (int i = 1; i <= n; ++i){
            for (int j = 1; j <= k && j <= i; ++j ){
                dp[i][j] = dp[i - 1][j];
                f[i - j][0] = max(f[i - j][0], dp[i - 1][j - 1] - a[i] - b[i]);
                f[i - j][1] = max(f[i - j][1], dp[i - 1][j - 1] - a[i] + b[i]);
                f[i - j][2] = max(f[i - j][2], dp[i - 1][j - 1] + a[i] - b[i]);
                f[i - j][3] = max(f[i - j][3], dp[i - 1][j - 1] + a[i] + b[i]);
                dp[i][j] = max(dp[i][j], f[i - j][0] + a[i] + b[i]);
                dp[i][j] = max(dp[i][j], f[i - j][1] - a[i] + b[i]);
                dp[i][j] = max(dp[i][j], f[i - j][2] + a[i] - b[i]);
                dp[i][j] = max(dp[i][j], f[i - j][3] - a[i] - b[i]);
            }
        }
        cout << dp[n][k] << endl; 
    } 
}
