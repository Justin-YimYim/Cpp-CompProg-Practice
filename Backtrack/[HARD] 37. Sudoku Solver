// unfinished

typedef pair<int, int> pos;

class Solution {
public:
    void initPriorityBoard(vector<vector<char>>& board, map<pair<int, int>, int> priorityBoard){
        for (int i{0}; i < 9; i++){
            for (int j{0}; j < 9; j++){
                pos Pos{i, j};
                priorityBoard[Pos] = (1 << 9) - 1;
            }
        }
        
        for (int i{0}; i < 9; i++){
            for (int j{0}; j < 9; j++){
                if (board[i][j] != '.'){
                    pos Pos{i, j};
                    priorityBoard[Pos] = 1 << 9;
                    int num{board[i][j] - '1'};
                    for (int k{0}; k < 9; k++){
                        pos Pos2{k, j};
                        pos Pos3{i, k};
                        if (Pos != Pos2 && priorityBoard[Pos2] != 1 << 9){
                            priorityBoard[Pos2] &=  ~(1 << num);
                        }
                        if (Pos != Pos3 && priorityBoard[Pos3] != 1 << 9){
                            priorityBoard[Pos3] &= ~(1 << num);
                        }
                    }
                    int row = i - i % 3;
                    int col = j - j % 3;
                    for (int h{0}; h < 3; h++){
                        for (int k{0}; k < 3; k++){
                            pos Pos4{row + h, col + k};
                            if (Pos.first != Pos4.first && Pos.second != Pos4.second  && priorityBoard[Pos4] != 1 << 9){
                                priorityBoard[Pos4] &= ~(1 << num);
                            }
                        }
                    }
                }
            }
        }
        
        for (auto i = priorityBoard.begin(); i != priorityBoard.end(); i++){
            cout << i->first.first << ',' << i->first.second << ":" << i->second << endl;
        }
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        map<pos, int> priorityBoard;
        initPriorityBoard(board, priorityBoard);
    }
};
