// Directly solved
// Observation: let say n = 3, the left most number depends on max(num) where num * (n - 1)! < k

class Solution {
public:
    string getPermutation(int n, int k) {
        int permu[n];
        int consume[n];
        permu[0] = 1;
        consume[0] = 1;
        string ans;
        for (int i{1}; i < n; i++){
            permu[i] = permu[i - 1] * (i + 1);
            consume[i] = i + 1;
        }

        for (int i{n - 2}; i >= 0; i--){
            int tmp{1};
            while (tmp * permu[i] < k){
                tmp++;
            }
            tmp--;
            k -= tmp * permu[i];
            int num{0};
            
            
            
            while (tmp > -1){
                if (consume[num] != 0){
                    tmp--;
                }
                num++;
            }
            num--;
            consume[num] = 0;
            ans += '1' + num;
        }
        
        for (auto num: consume){
            if (num != 0){
                ans += '0' + num;
            }
        }
        return ans;
    }
};
