#include <bits/stdc++.h>

using namespace std;

// In get_ans, computing all factors takes sqrt(n) times + dp use n^2/3 times

int gcd(int a, int b){
    if (a % b == 0) return b;
	else return gcd(b, a % b);
}

int get_ans(int x, int k){
    if (x==1)return 0;
    vector<int> fac;
    int i=1;
    for (;i*i<x;++i)
        if (x%i==0) fac.push_back(i), fac.push_back(x/i);
    if (i*i==x) fac.push_back(i);
    sort(fac.begin(), fac.end());
    int n=fac.size();
    int dp[n];
    for (int j=1;j<n;j++)dp[j]=1000;
    dp[0]=1;
    for (int j=1;j<n;j++){
        if (fac[j]<=k){
            dp[j]=1;
            continue;
        }
        for (int h=0;h<j;h++){
            if (fac[j] % fac[h] == 0 && fac[j]/fac[h] <= k){
                dp[j]=min(dp[h]+1, dp[j]);
            }
        }
    }
    return dp[n-1] >= 1000 ? -1 : dp[n-1];
}

void solve(){
    int x, y, k, ans=0;
    cin >> x >> y >> k;
    int g = gcd(max(x,y), min(x,y));
    y /= g;
    x /= g;
    int ax = get_ans(x, k);
    int ay = get_ans(y, k);
    if(ax == -1 || ay == -1) cout << -1 << '\n';
    else cout << ax + ay << '\n';
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
