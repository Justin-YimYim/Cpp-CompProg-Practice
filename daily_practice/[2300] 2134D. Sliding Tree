#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 10;
vector<vector<int>> g;
vector<int> path;
int cnt, x, y;

void dfs(int cur, int p, int tmp) {
  if (tmp > cnt) {
    cnt = tmp;
    x = cur;
  }
  for (auto &a : g[cur])
    if (a != p)
      dfs(a, cur, tmp + 1);
}

void dfs2(int cur, int p, int tmp) {
  if (tmp > cnt) {
    cnt = tmp;
    y = cur;
  }
  for (auto &a : g[cur])
    if (a != p)
      dfs2(a, cur, tmp + 1);
}

bool dfs3(int cur, int p) {
  if (cur == y) {
    return true;
  }
  for (auto &a : g[cur])
    if (a != p) {
      path.push_back(a);
      if (dfs3(a, cur))
        return true;
      path.pop_back();
    }
  return false;
}

void solve() {
  int n;
  cin >> n;
  g = vector<vector<int>>(n + 1, vector<int>());
  vector<int> deg(n + 1, 0);
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    deg[u]++;
    deg[v]++;
  }
  bool flag(false);
  for (auto &a : deg)
    if (a > 2) {
      flag = true;
    }

  if (!flag) {
    cout << "-1\n";
    return;
  }

  cnt = 0;
  dfs(1, 0, 0);
  cnt = 0;
  dfs2(x, 0, 0);
  path = vector<int>();
  path.push_back(x);
  dfs3(x, 0);
  for (int i = 1; i < path.size() - 1; ++i) {
    if (g[path[i]].size() > 2) {
      int z;
      for (auto &a : g[path[i]]) {
        if (a != path[i - 1] && a != path[i + 1])
          z = a;
      }
      cout << path[i - 1] << ' ' << path[i] << ' ' << z << '\n';
      return;
    }
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
