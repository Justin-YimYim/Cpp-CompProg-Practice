class Graph {
public:
    unordered_map<int, vector<pair<int, int>>> graph;
    Graph(int n, vector<vector<int>>& edges) {
        for (auto &e: edges){
            graph[e[0]].push_back({e[2], e[1]});
        }
    }
    
    void addEdge(vector<int> edge) {
        graph[edge[0]].push_back({edge[2], edge[1]});
    }
    
    int shortestPath(int node1, int node2) {
        if (node1 == node2) return 0;
        unordered_map<int, int> searched;
        searched.insert({node1, 0});
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
        for (auto &a: graph[node1]) pq.push({a.first, a.second});
        while (!pq.empty()){
            auto top = pq.top();
            if (top.second == node2) return top.first;
            pq.pop();
            if (searched.find(top.second) == searched.end()){
                searched[top.second] = top.first;
                for (auto it = graph[top.second].begin(); it != graph[top.second].end(); it++) 
                    pq.push({top.first + it->first, it->second});
            }
        }
        return -1;
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */
