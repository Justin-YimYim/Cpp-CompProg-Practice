#include <queue>

using namespace std;
class MedianFinder {
public:
    int n{0};
    priority_queue<int, vector<int>, greater<int>> min_heap;
    priority_queue<int> max_heap;
    MedianFinder() = default;
    
    void addNum(int num) {
        if (max_heap.empty()){
            max_heap.push(num);
        }
        else if (max_heap.size() > min_heap.size()){
            if (num < max_heap.top() ){
                min_heap.push(max_heap.top());
                max_heap.pop();
                max_heap.push(num);
            }
            else{
                min_heap.push(num);
            }
        }
        else{
            if (num > min_heap.top()){
                max_heap.push(min_heap.top());
                min_heap.pop();
                min_heap.push(num);
            }
            else{
                max_heap.push(num);
            }
        }
        n++;
    }
    
    double findMedian() {
        if (n % 2 == 1){
            if (max_heap.size() > min_heap.size()){
                return max_heap.top();
            }
            else return min_heap.top();
        }
        else return float(max_heap.top() + min_heap.top()) / 2;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
