
typedef struct SegmentTreeMaxWithLazyTag{
    vector<int> count;
    vector<int> lazyTag;
    SegmentTreeMaxWithLazyTag(int n): count(n * 4, 0), lazyTag(n * 4, 0){}

    void propogateRoot(int vertex, int value){
        if (vertex == 0) return;
        vertex = (vertex - 1) / 2;
        if (count[vertex] < value) {
            count[vertex] = value;
            propogateRoot(vertex, value);
        }
    }

    void setMax(int l, int r, int L, int R, int value, int vertex){
        if (l == L && r == R){
            count[vertex] = max(value, count[vertex]);
            lazyTag[vertex] = max(value, lazyTag[vertex]);
            propogateRoot(vertex, value);
            return;
        }
        int mid((L + R) / 2);
        if (mid < l) setMax(l, r, mid + 1, R, value, vertex * 2 + 2);
        else if (mid >= r) setMax(l, r, L, mid, value, vertex * 2 + 1);
        else {
            setMax(l , mid, L, mid, value, vertex * 2 + 1);
            setMax(mid + 1, r, mid + 1, R, value, vertex * 2 + 2);
        }
    }

    int query(int l, int r, int L, int R, int vertex, int lazy){
        if (l == L && r == R){
            return max(lazy, count[vertex]);
        }
        int mid((L + R) / 2);
        lazy = max(lazyTag[vertex], lazy);
        if (mid < l) return query(l, r, mid + 1, R, vertex * 2 + 2, lazy);
        else if (mid >= r) return query(l, r, L, mid, vertex * 2 + 1, lazy);
        else
            return max(query(l , mid, L, mid, vertex * 2 + 1, lazy), query(mid + 1, r, mid + 1, R, vertex * 2 + 2, lazy));
    }

} SegmentTree;

class Solution {
public:
    int maximumRobots(vector<int>& chargeTimes, vector<int>& runningCosts, long long budget) {
        SegmentTree tree(chargeTimes.size());
        for (int i = 0; i <= chargeTimes.size() - 1; ++i) tree.setMax(i, i, 0, chargeTimes.size() - 1, chargeTimes[i], 0);
        long long low(1), high(chargeTimes.size()), ans(0), budgetll(budget);
        while(low <= high){
            long long mid((low + high) / 2), sum(0), tmp(LLONG_MAX), ptr1(0), ptr2(0);
            // cout << low << " " << high << " " << mid << " " << tmp << endl;
            if (mid == 0) break;
            while (ptr2 < mid){
                sum += runningCosts[ptr2];
                ptr2++;
            }
            tmp = min(tmp, mid * sum + tree.query(ptr1, ptr2 - 1, 0, chargeTimes.size() - 1, 0, 0));
            while (ptr2 < chargeTimes.size()){
                sum += runningCosts[ptr2] - runningCosts[ptr1];
                // cout << mid << " " << sum << " " << tree.query(ptr1 + 1, ptr2, 0, chargeTimes.size() - 1, 0, 0) << " " <<  mid * sum + tree.query(ptr1 + 1, ptr2, 0, chargeTimes.size() - 1, 0, 0) << endl;
                tmp = min(tmp, mid * sum + tree.query(ptr1 + 1, ptr2, 0, chargeTimes.size() - 1, 0, 0));
                // cout << "tmp3:" << tmp << " " << budgetll << endl;
                if (tmp <= budgetll) break;
                ptr2++;
                ptr1++;
            }
            if (tmp > budgetll) high = mid - 1;
            else {
                low = mid + 1;
                ans = mid;
            }
            // cout << " === " << endl;
            // cout << low << " " << tmp << " " << high << endl;
        }
        return ans;
    }
};
