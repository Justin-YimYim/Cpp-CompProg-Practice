void binary_search(vector<vector<int>> &arr, int value){
    int left{0};
    int right{static_cast<int>(arr.size()) - 1};
    bool tmp{false};
    int mid{(right + left) >> 1};
    while (left <= right){
        mid = (right + left) >> 1;
        if (arr[mid][0] - 1 > value){
            right = mid - 1;
        }else if (arr[mid][1] + 1 < value){
            left = mid + 1;
        }else{
            if (arr[mid][0] <= value && arr[mid][1] >= value){
                
            }else if (arr[mid][0] - 1 == value){
                if (mid != 0){
                    if (arr[mid - 1][1] + 1 != value){
                        arr[mid][0] = value;
                    }else{
                        arr[mid][0] = arr[mid - 1][0];
                        arr.erase(arr.begin() + mid - 1);
                    }
                }else{
                    arr[mid][0] = value;
                }
            }else{
                if (mid != arr.size() - 1){
                    if (arr[mid + 1][0] - 1 != value){
                        arr[mid][1] = value;
                    }else{
                        arr[mid][1] = arr[mid + 1][1];
                        arr.erase(arr.begin() + mid + 1);
                    }
                }else{
                    arr[mid][1] = value;
                }
            }
            tmp = true;
            break; 
        }
    }
    if (!tmp){
        vector<int> tmp{value, value};
        if (arr[mid][0] > value){
            arr.insert(arr.begin() + mid, tmp);
        }else{
            arr.insert(arr.begin() + mid + 1, tmp);
        }
    }
}
class SummaryRanges {
private:
    vector<vector<int>> ans;
public:
    SummaryRanges() {
        
    }
    
    void addNum(int value) {
        if (ans.empty()){
            vector<int> tmp{value, value};
            ans.push_back(tmp);
        }
        else{
            binary_search(ans, value);
        }
    }
    vector<vector<int>> getIntervals() {
        return ans;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(value);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */
