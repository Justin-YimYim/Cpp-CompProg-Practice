// 151 / 178 test cases passed.
// probably need to cache and skip some index
// do, while loop for next_permuation otherwise will skip first permutation

class Solution {
public:
    
    vector<int> findSubstring(string s, vector<string>& words) {
        unordered_set<string> permu;
        int vecSize{static_cast<int>(words.size())};
        int wordSize{static_cast<int>(words[0].size())};
        int fullLength{vecSize * wordSize};
        
        sort(words.begin(), words.end());
        do{
            string tmp;
            for (auto word: words){
                tmp += word;
            }
            permu.insert(tmp);
        }while(next_permutation(words.begin(), words.end()));
        

        vector<int> ans;
        for (int i{0}; i < s.length() - fullLength + 1; i++){
            if (permu.find(s.substr(i, fullLength)) != permu.end()){
                ans.push_back(i);
            }
        }
        
        return ans;
        
    }
};
