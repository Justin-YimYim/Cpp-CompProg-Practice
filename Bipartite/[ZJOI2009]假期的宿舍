#include <bits/stdc++.h>

using namespace std;

int g[51][51];
int link[51];
bool b[51];
bool c[51];
bool vis[51];

int dfs(int x, int n){
	for (int i=1;i<=n;++i){
		if (!g[x][i] || vis[i])continue;
		vis[i] = 1;
		if (link[i] == 0 || dfs(link[i], n)){
			link[i]=x;
			return 1;
		}
	}
	return 0;
}

void solve(){
    memset(g,0,sizeof(g));
    memset(b,0,sizeof(b));
    memset(c,0,sizeof(c));
    memset(link,0,sizeof(link));
    
    // b[i] == 1 has bed
    int n;
    cin>>n;
    for (int i=1;i<=n;i++){
        int x;
        cin>>x;
        b[i]=x;
    }
    // c[i] == 1 needs bed 
    for (int i=1;i<=n;i++){
        int x;
        cin>>x;
        if (x == 1 && b[i]) c[i]=0;
        else c[i]=1;
    }
    
    for (int i=1;i<=n;++i){
        for (int j=1;j<=n;++j){
            int x;
            cin>>x;
            if (c[i] == 0 || b[j] == 0)continue;
            if (i == j) g[i][j] = 1;
            else g[i][j] = x;
        }
    }
    for (int i = 1;i<=n;++i){
        memset(vis,0,sizeof(vis));
        if (c[i])
            if (!dfs(i, n)){
                cout << "T_T\n";
                return;
            }
    }
    cout << "^_^\n";
}

int main(){
    std::ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}
