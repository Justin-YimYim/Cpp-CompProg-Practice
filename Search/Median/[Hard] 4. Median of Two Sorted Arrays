// Find medina => no need concern how the sort only need to make into two containers then find max and min of the two contianers
// Median = sum of two numbers / 2
// Search = find the requirement satisfy two numbers

// unresolved odd number

class Solution {
public:
    int max(int a, int b){
        return a > b? a : b;
    }
    
    int min (int a, int b){
        return a < b? a : b;
    }
    
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int total = nums1.size() + nums2.size();
        int n2 = nums2.size() / 2;
        int n1 = nums1.size() / 2;
        
        
        if (nums1.size() < total / 4){
            int k = nums2.size();
            k = (k - nums1.size()) / 2 + k;
            if (total & 1) return nums2[k + 1];
            else return (nums2[k] + nums2[k + 1]) / 2;
        }
        else if (nums2.size() < total / 4){
            int k = nums1.size();
            k = (k - nums2.size()) / 2 + k;
            if (total & 1) return nums1[k + 1];
            else return (nums1[k] + nums1[k + 1]) / 2;
        }
        else{
            while (!(nums2[n2] < nums1[n1 + 1] && nums1[n1] < nums2[n2 + 1])){
                if (nums2[n2] < nums1[n1 + 1]){
                    n1 -= (nums2.size() - n2) / 2;
                    n2 += (nums2.size() - n2) / 2;
                }
                else{
                    n2 -= (nums1.size() - n1) / 2;
                    n1 += (nums1.size() - n1) / 2;
                }
            } 
        }
        
        int max_num = max(nums1[n1], nums2[n2]);
        int min_num = min(nums1[n1 + 1], nums2[n2 + 1]);
        return (max_num + min_num) / 2;
    }
};
