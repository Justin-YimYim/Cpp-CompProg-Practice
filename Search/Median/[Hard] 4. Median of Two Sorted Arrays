// Two containers approach O(log(mix a, b))
// Find medina => no need concern how the sort only need to make into two containers then find max and min of the two contianers

// Learning from this code: 
// 1. Use size parameter and lambda function to indicate corner cases
// 2. Use search two median in two array to come out the ultimate median

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int total = nums1.size() + nums2.size();
        if(m > n) return findMedianSortedArrays(nums2,nums1);
        
        int left = 0;
        int right = m;
        
        while(left <= right){
            int partx = left + (right - left)/2;
            int party = (total + 1) / 2 - partx;
            int maxlx = (partx==0) ?INT_MIN : nums1[partx-1];
            int minrx = (partx==m) ?INT_MAX : nums1[partx];
            int maxly = (party==0) ?INT_MIN : nums2[party-1];
            int minry = (party==n) ?INT_MAX : nums2[party];
            
            if(maxlx <= minry && maxly <= minrx){
                if(total & 1) return double (max(maxlx,maxly));
                else return double (max(maxlx,maxly)+min(minrx,minry))/2;
            }else if(maxlx>minry)
                right = partx - 1;
            else
                left = partx + 1;
        }
        return -1.0;
    }
};
