class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        map<string, vector<string>> dict;
        unordered_map<string, bool> walked;
        bool isExist(false);
        for (int i = 0; i < wordList.size(); ++i){
            walked[wordList[i]] = false;
            if (wordList[i] == endWord) isExist = true;
            for (int j = 0; j < wordList.size(); ++j){
                if (i == j) continue;
                if (checkSame(wordList[i], wordList[j])) dict[wordList[i]].push_back(wordList[j]);
            }
        }
        if (isExist == false) return 0;
        for (int i = 0; i < wordList.size(); ++i) if (checkSame(beginWord, wordList[i])) dict[beginWord].push_back(wordList[i]);
        walked[beginWord] = true;
        queue<pair<string, int>> q;
        q.push({beginWord, 1});
        return bfs(endWord, walked, dict, q);
    }
    bool checkSame(string& s1, string& s2){
        bool isSame(true);
        for (int i = 0; i < s1.size(); ++i){
            if (s1[i] != s2[i] && isSame) isSame = false;
            else if (s1[i] != s2[i]) return false;
        }
        return true;
    }

    int bfs(string& endWord, unordered_map<string, bool> walked, map<string, vector<string>> &dict, queue<pair<string, int>> &q){
        while (!q.empty()){
            auto crt = q.front();
            q.pop();
            auto& nxtNode = dict[crt.first];
            for (auto &node: nxtNode){
                cout << node << endl;
                if (node == endWord) return crt.second + 1;
                if (walked[node] == false){
                    walked[node] = true;
                    q.push({node, crt.second + 1});
                }
            }
        }
        return 0;
    }
};
