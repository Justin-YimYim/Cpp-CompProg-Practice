class Solution {
public:
    string crackSafe(int n, int k) {
        string ans;
        if (n == 1) {
            for (int i = 0; i < k; i++) ans += to_string(i);
            return ans;
        }
        for (int i = 0; i < n - 1; i++) ans += "0";
        if (k == 1) return ans += "0";
        unordered_map<string, int> suffixRemain;
        for (int i = 0; i < pow(k, n); ++i){
            string suffix = ans.substr(ans.size() - n + 1, n - 1);
            if (suffixRemain.find(suffix) != suffixRemain.end()) suffixRemain[suffix]--;
            else suffixRemain[suffix] = k - 1;
            ans += to_string(suffixRemain[suffix]);
        }
        return ans;
    }
};
