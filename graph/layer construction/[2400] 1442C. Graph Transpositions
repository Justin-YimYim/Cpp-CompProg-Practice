#include <bits/stdc++.h>

#define pii pair<int, int>
#define MOD 998244353

using namespace std;

void FastIO(){
    std::ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    // #ifndef ONLINE_JUDGE
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    // #endif
}

long long dp[200005][20];

vector<vector<int> > g1;
vector<vector<int> > g2;

int dist[200005];

int LAYER = 0;

priority_queue<pii, vector<pii>, greater<pii> > dijkstra(priority_queue<pii, vector<pii>, greater<pii> >& newAdd){
    auto &g_crt = ((LAYER & 1) == 0? g1: g2);

    priority_queue<pii, vector<pii>, greater<pii> >nA;
    while (!newAdd.empty()){
        int cost = newAdd.top().first;
        int node = newAdd.top().second;
        newAdd.pop();
        for (auto v: g_crt[node])
        if (dist[v] == 0x7f7f7f7f){
            dist[v] = cost + 1;
            nA.push(make_pair(cost + 1, v));
        }
    }
    LAYER++;
    return nA;
}

long long cal(){
    LAYER--;
    long long ans(0);
    while (LAYER--){
        ans <<= 1;
        ans %= MOD;
        ans += 1;
        ans %= MOD;
    }
    return ans;
}

int main(){
    FastIO();
    int n,m;
    cin>>n>>m;
    g1 = vector<vector<int> > (n+1);
    g2 = vector<vector<int> > (n+1);
    while (m--){
        int u,v;
        cin>>u>>v;
        g1[u].push_back(v);
        g2[v].push_back(u);
    }

    memset(dp, 0x7f, sizeof(dp));
    priority_queue<pair<long long, pii>, vector<pair<long long, pii> >, greater<pair<long long, pii> > > pq;
    // {weight, {vertex, layer}}

    dp[1][0] = 0;
    pq.push(make_pair(0, make_pair(1, 0)));
    while (!pq.empty()){
        long long w = pq.top().first;
        int v =  pq.top().second.first;
        int layer = pq.top().second.second;
        pq.pop();
        if (layer == 18) continue;

        auto &g_crt = (layer % 2? g2 : g1);
        auto &g_nxt = (layer % 2? g1 : g2);

        // how to handle mod? --> no need 
        for (auto nxt: g_crt[v]){
            if (dp[nxt][layer] > w + 1){
                dp[nxt][layer] = w + 1;
                pq.push(make_pair(w + 1, make_pair(nxt, layer)));
            }
        }

        long long tran_cost = 1 << layer;
        for (auto nxt: g_nxt[v]){
            if (dp[nxt][layer + 1] > w + 1 + tran_cost){
                dp[nxt][layer + 1] = w + 1 + tran_cost;
                pq.push(make_pair(w + 1 + tran_cost, make_pair(nxt, layer + 1)));
            }
        }
    }

    long long ans(LLONG_MAX);
    for (int i=0;i<18;++i){
        if (dp[n][i] < INT_MAX)
            ans = min(ans, dp[n][i]);
    }


    if (ans != LLONG_MAX) cout << ans << '\n';
    else{
        memset(dist, 0x7f, sizeof(dist));
        dist[1] = 0;
        priority_queue<pii, vector<pii>, greater<pii> > newAdd;
        newAdd.push(make_pair(0, 1));
        // {cost, node}
        while (dist[n] == 0x7f7f7f7f){
            newAdd = dijkstra(newAdd);
        }
        cout << (cal() % MOD + dist[n] % MOD) % MOD << '\n';
    }
    return 0;
}
