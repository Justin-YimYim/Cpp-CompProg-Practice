using prii = pair<int, int>;
class Solution {
public:
    int uniquePathsIII(vector<vector<int>>& grid) {
        int countEmpty(0), walked(0);
        pair<int, int> startPosition{0, 0}, endPosition{0, 0};
        for (int i = 0; i < grid.size(); ++i){
            for (int j = 0; j < grid[0].size(); ++j){
                if (grid[i][j] == 1) {
                    startPosition = make_pair(i, j);
                    grid[i][j] = 0;
                }
                if (grid[i][j] == 0) countEmpty++;
                if (grid[i][j] == 2) endPosition = make_pair(i, j);
            }
        }
        return dfs(startPosition, walked, countEmpty, grid);
    }

    int dfs(prii stPos, int walked, const int& countEmpty, vector<vector<int>> grid){
        if (stPos.first >= 0 && stPos.first < grid.size() && stPos.second >= 0 && stPos.second < grid[0].size()) {
            if (grid[stPos.first][stPos.second] == 0) {
                prii left{stPos.first, stPos.second + 1}, right{stPos.first, stPos.second - 1}, up{stPos.first - 1, stPos.second}, low{stPos.first + 1, stPos.second};
                grid[stPos.first][stPos.second] = 1;
                walked++;
                return dfs(left, walked, countEmpty, grid) + dfs(right, walked, countEmpty, grid) + dfs(up, walked, countEmpty, grid) + dfs(low, walked, countEmpty, grid);
                }
            if (grid[stPos.first][stPos.second] == 2) if (walked == countEmpty) return 1;
        }
        return 0;
    }
};
