#include <bits/stdc++.h>

using namespace std;

struct unionFind{
    vector<int> rt;
    unionFind(int n): rt(n + 1){
        iota(rt.begin(), rt.end(), 0);
    }

    int findRoot(int key){
        if (rt[key] != key){
            rt[key] = findRoot(rt[key]);
        }
        return rt[key];
    }

    void merge(int key1, int key2){
        int rootKey2 = findRoot(key2);
        int rootKey1 = findRoot(key1);
        rt[key2] = rootKey1;
        rt[rootKey2] = rootKey1;
    }
};

int main(){
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    
    int t;
    cin >> t;
    while (t--){
        int n;
        cin >> n;
        unordered_map<int, vector<int> > g;
        unionFind uf(n);
        for (int i = 1; i <= n; ++i){
            string s;
            cin >> s;
            for (int j = i; j < n ; ++j){
                if (s[j] == '1'){
                    g[i].push_back(j + 1);
                    g[j + 1].push_back(i);
                    uf.merge(i, j + 1);
                }
            }
        }
        unordered_map<int, vector<int> > component;
        map<int, int> order;
        for (int i = 1; i <= n; ++i){
            component[uf.findRoot(i)].push_back(i);
        }

        bool flag(false);
        if (component.size() == 1){
            cout << 0 << endl;
            flag = true;
        }
        for (auto &a: component){
            if (flag) break;
            auto component_s = a.second.size();
            int smallest_node(n + 1);
            int smallest_connected(INT_MAX);
            for (auto &b: a.second){
                if (g.find(b) == g.end() || g[b].size() != component_s - 1){
                    flag = true;
                    if (g[b].size() < smallest_connected){
                        smallest_node = b;
                        smallest_connected = g[b].size();
                    }
                }
            }
            if (flag) {
                cout << 1 << endl;
                cout << smallest_node << endl;
                break;
            }
            order[component_s] = a.first;
        }

        if (flag) continue;
        if (order.size() < 3)
        {
            cout << order.begin()->first << endl;
            for (auto &a: component[order.begin()->second]){
                cout << a << " ";
            }
            cout << endl;
        }else{
            auto it = order.begin();
            cout << 2 << endl;
            cout << component[it->second][0] << " ";
            it++;
            cout << component[it->second][0] << endl;
        }
    }
}
