typedef struct UnionFindWthRank{
    public:
        vector<int> root;
        UnionFindWthRank(int n): root(n + 1){
            iota(root.begin(), root.end(), 0);
        }
        int findRoot(int key){
            if (root[key] != key){
                root[key] = findRoot(root[key]);
            }
            return root[key];
        }

        void merge(int key1, int key2){
            int root1 = findRoot(key1), root2 = findRoot(key2);
            if (root1 != root2){
                if (root2 > root1) {
                    root[root1] = root2;
                    root[key1] = root2;
                    }
                else {
                    root[root2] = root1;
                    root[key2] = root1;
                    }
            }
        }
    } UnionFind;

class Solution {
public:
    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {
        UnionFind uf(vals.size());
        map<int, vector<int>> dict;
        unordered_map<int, vector<int>> graph;
        int ans(0);
        for (auto &edge: edges){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        for (int i = 0; i < vals.size(); ++i) dict[vals[i]].push_back(i);
        for (auto &pair: dict){
            unordered_map<int, long> tmp;
            for (auto &key: pair.second) for (auto &node: graph[key]) if (vals[node] <= vals[key]) uf.merge(node, key);
            for (auto &key: pair.second) tmp[uf.findRoot(key)]++;
            for (auto &pr: tmp) ans += pr.second * (pr.second + 1) / 2;
        }
        return ans;
    }
};
