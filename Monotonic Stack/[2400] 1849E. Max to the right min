#include <bits/stdc++.h>
#include <iostream>

using namespace std;

struct segmentTree{
    vector<long long> arr, lt;
    segmentTree(long long n): arr(4 * n, 0), lt(4 *n, 0){};
    void set(long long l, long long r, long long L, long long R, long long idx, long long value){
        if (L > R || l > r) return;
        if (l == L && r == R) {
            arr[idx] = value;
            if (value)
                lt[idx] = 1;
            else lt[idx] = 0;
            pushup(idx);
            return;
        }
        else{
            long long tmp((L + R) / 2);
            pushdown(L, R, tmp, idx);
            if (tmp >= r) set(l, r, L, tmp, idx * 2 + 1, value);
            else if(tmp + 1 <= l) set(l, r, tmp + 1, R, idx * 2 + 2, value);
            else {
                set(l, tmp, L, tmp, idx * 2 + 1, max(0LL, min(value, tmp - l + 1))); 
                set(tmp + 1, r, tmp + 1, R, idx * 2 + 2, max(0LL, min(value, r - tmp)));
            }
        }
        
    }
    
    void pushup(long long idx){
        if (idx == 0) return;
        long long updateidx = (idx - 1) / 2;
        arr[updateidx] = arr[updateidx * 2 + 1] + arr[updateidx * 2 + 2];
        pushup(updateidx);
    }
    
    void pushdown(long long l, long long r, long long mid, long long idx){
        if (lt[idx]){
            lt[idx] = 0;
            arr[idx * 2 + 1] = mid - l + 1;
            arr[idx * 2 + 2] = r - mid;
            lt[idx * 2 + 1] = 1;
            lt[idx * 2 + 2] = 1;
        }else{
            lt[idx * 2 + 1] = 0;
            lt[idx * 2 + 2] = 0;
        }
    }
};

int main(){
    long long ans(0);
    long long n;
    cin >> n;
    long long p[n + 1] = {}, a[n + 1] = {}, b[n + 1] = {}, t1, t2, p1, p2;
    segmentTree segTree(n + 1);
    a[1]=b[1]=t1=t2=1;
    for (long long i = 1; i <= n; ++i)
        cin >> p[i];
    
    for (long long i = 2; i <= n; ++i){
        // cout << i << endl;
        while (t1 && p[a[t1]] < p[i]) --t1;
        while (t2 && p[b[t2]] > p[i]) --t2;
        // cout << "a:";
        // for (auto a: a) cout << a << " ";
        // cout << endl;
        // cout << "b:";
        // for (auto a: b) cout << a << " ";
        // cout << endl;
        p1 = a[t1] + 1;
        p2 = b[t2] + 1;
        // cout << p1 << "---" << p2 << endl;
        if (p1 <= i - 1) 
            segTree.set(p1, i - 1, 1, n, 0, i - p1);
        else 
            segTree.set(p2, i - 1, 1, n, 0, 0);
        ans += segTree.arr[0];
        a[++t1] = i;
        b[++t2] = i;
        // for (auto &a: segTree.arr)
        //     cout << a << " ";
        //     cout << endl;
        cout << ans << " ";
    }
    cout << ans;
    return 0;
}
